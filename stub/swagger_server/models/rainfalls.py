# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Rainfalls(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, basin_id: int=None, year: int=None, rainfall: float=None):  # noqa: E501
        """Rainfalls - a model defined in Swagger

        :param basin_id: The basin_id of this Rainfalls.  # noqa: E501
        :type basin_id: int
        :param year: The year of this Rainfalls.  # noqa: E501
        :type year: int
        :param rainfall: The rainfall of this Rainfalls.  # noqa: E501
        :type rainfall: float
        """
        self.swagger_types = {
            'basin_id': int,
            'year': int,
            'rainfall': float
        }

        self.attribute_map = {
            'basin_id': 'basinId',
            'year': 'year',
            'rainfall': 'rainfall'
        }
        self._basin_id = basin_id
        self._year = year
        self._rainfall = rainfall

    @classmethod
    def from_dict(cls, dikt) -> 'Rainfalls':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rainfalls of this Rainfalls.  # noqa: E501
        :rtype: Rainfalls
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basin_id(self) -> int:
        """Gets the basin_id of this Rainfalls.


        :return: The basin_id of this Rainfalls.
        :rtype: int
        """
        return self._basin_id

    @basin_id.setter
    def basin_id(self, basin_id: int):
        """Sets the basin_id of this Rainfalls.


        :param basin_id: The basin_id of this Rainfalls.
        :type basin_id: int
        """

        self._basin_id = basin_id

    @property
    def year(self) -> int:
        """Gets the year of this Rainfalls.


        :return: The year of this Rainfalls.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Rainfalls.


        :param year: The year of this Rainfalls.
        :type year: int
        """

        self._year = year

    @property
    def rainfall(self) -> float:
        """Gets the rainfall of this Rainfalls.


        :return: The rainfall of this Rainfalls.
        :rtype: float
        """
        return self._rainfall

    @rainfall.setter
    def rainfall(self, rainfall: float):
        """Sets the rainfall of this Rainfalls.


        :param rainfall: The rainfall of this Rainfalls.
        :type rainfall: float
        """

        self._rainfall = rainfall
